#!/usr/bin/env bash
# ┬┌─┬ ┬┌┐┌┌─┐┌┬┐
# ├┴┐│ ││││└─┐ │
# ┴ ┴└─┘┘└┘└─┘ ┴
# Created by Siddharth Dushantha
#
# kunst-kitty by Yousif AlHawaj
#
# Dependencies: kitten, imagemagick, bash, ffmpeg, mpc, jq, mpd


VERSION=1.3.4
TMP=${TMPDIR:-/tmp}
COVER=$TMP/kunst.jpg
COVER_TEMP=$TMP/kunst.temp.jpg
MUSIC_DIR="${KUNST_MUSIC_DIR:-${HOME}/Music/}"
termsize=$(stty size)
LINES=${termsize% *}
COLUMNS=${termsize#* }
SIZE="$KUNST_SIZE"
POSITION="${KUNST_POSITION:-0x0}"
ONLINE_ALBUM_ART=""
PROG_NAME=$(basename "$0")

set_term_size() {
    termsize=$(stty size)
    LINES=${termsize% *}
    COLUMNS=${termsize#* }

    DISPLAY_SIZE="${KUNST_SIZE:-"${COLUMNS}x${LINES}"}"
}

show_help() {
    printf "%s" "\
usage: kunst [-h|--help] [--size \"px\"] [--position \"+x+y\"]
             [--music_dir \"path/to/dir\"] [--verbose] [--version]

┬┌─┬ ┬┌┐┌┌─┐┌┬┐
├┴┐│ ││││└─┐ │
┴ ┴└─┘┘└┘└─┘ ┴
Download and display album art or display embedded album art

optional arguments:
   -h, --help            show this help message and exit
   --size                what size to display the album art in
   --position            the position where the album art should be displayed
   --music_dir           the music directory which MPD plays from
   --verbose             show the output
   --force-online        force getting cover from the internet
   --version             show the version of kunst you are using
"
}

log() {
    [ "$VERBOSE" ] && echo "$PROG_NAME: $1"
}

logError() {
    echo "$PROG_NAME: $1" >&2
    exit 1
}


# Parse the arguments
options=$(getopt -o h --long 'position:,size:,music_dir:,version,force-online,verbose,help' -- "$@")
eval set -- "$options"

while true; do
    case "$1" in
        --size)
            shift;
            SIZE=$1
            ;;
        --position)
            shift;
            POSITION=$1
            ;;
        --music_dir)
            shift;
            MUSIC_DIR=$1
            ;;
        -h|--help)
            show_help
            exit
            ;;
        --version)
            echo $VERSION
            exit
            ;;
        --force-online)
            ONLINE_ALBUM_ART=true
            ;;
        --verbose)
            VERBOSE=true
            ;;
        --)
            shift
            break
            ;;
    esac
    shift
done

# This is a base64 endcoded image which will be used if
# the file does not have an emmbeded album art.
# The image is an image of a music note
read -r -d '' MUSIC_NOTE << EOF
iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAJESURBVGhD7Zg/axRRFMVXAtpYphEVREKClnHfJI0MmReSfAC3tRejhaBgo70fwN7aD2BvEU0gfztbu5AqMxNjoVnvG87KZXy7z5m5dxLI/OCw8Pade+7M3n3Dbq+jo6OjY8RwMJhKk+hhlph3eRJ9w/LF5jCOr1PTj6jpD7mNjkjDkbDl4vFjpX87teZJlkSfSD9501zYfv5QJ1fyZHGexuJtZs12ZqMzX8NlwX4+nK3NXMutWaOm39Nd/u5rMCSUao80fjBNwY+p8Y+krNxQVaGsLsfWzFLYS2r4M30Rf5WbaCJE6OILlhIidPEFSwkRuviCpYQIXXzB1WX26bR6ky4v3OPriNCFB1YRHa079Pr6eKk/h1IFfA+WdOGBk+QeXtT0Ft3pV6e2fxf2f+AeLOnCA8tC0xv09H1xGi/cgWUi3I8lXXigEzX8u3gmWPP8JI5uYdt/w2thSRceSM0/zVfnb+CtWvB6WNJFOlC6XhDpQOl6QaQDpesFkQ6UrhdEOlC6XpA6gcPB/avumKXnxCadXHkha766tTr1GlE18CRZvEmN7nHfOMGiS5XA4mdmYg64Z5Jg06VKYHlEQoKtOVIz6zx8f0iwNUNyZt2F+3zjBFt9pGe22gWYFLb6lEckJNjGUmWEssR8ga0+0jNL9Z75fD7Rp7UOW32kZxb/1u37vFyUu+sODtjqozGzxaFADfprFM3vuD3Y3gytmf17LJPHXbgTNb5BWhe58yNan1lpWp9ZDVqdWS1am9mOjo7LRq/3B1ESKyYUVquzAAAAAElFTkSuQmCC
EOF


is_connected() {
    # Check if internet is connected. We are using api.deezer.com to test
    # if the internet is connected because if api.deezer.com is down or
    # the internet is not connected this script will work as expected
    if ping -q -c 1 -W 1 api.deezer.com >/dev/null; then
        connected=true
    else
        log "unable to check online for the album art"
        connected=false
    fi
}


get_cover_online() {
    # Check if connected to internet
    is_connected

    if [ "$connected" == false ];then
        ARTLESS=true
        return
    fi

    # If the current playing song ends with .mp3 or something similar, remove
    # it before searching for the album art because including the file extension
    # reduces the chance of good results in the search query
    QUERY=$(mpc current | sed 's/\.[^.]*$//' | iconv -t ascii//TRANSLIT -f utf8)

    # Try to get the album cover online from api.deezer.com
    API_URL="https://api.deezer.com/search/autocomplete?q=$QUERY" && API_URL=${API_URL//' '/'%20'}
    log "fetching $API_URL"
    # Extract the albumcover from the json returned
    JSON=$(curl -s "$API_URL")
    ALBUM=$(echo "$JSON" | jq -r '.tracks.data[0].album.picture_big' | sed 's/null//');
    ARTIST=$(echo "$JSON" | jq -r '.tracks.data[0].artist.picture_big' | sed 's/null//');
    IMG_URL="${ALBUM:-$ARTIST}"

    if [ "$IMG_URL" = '' ] || [ "$IMG_URL" = 'null' ];then
        log "cover not found online"
        ARTLESS=true
    else
        log "cover found online"
        curl -o "$COVER_TEMP" -s "$IMG_URL"
        ARTLESS=false
    fi

}

find_album_art(){
    # Check if the user wants to get the album art from the internet,
    # regardless if the current song has an embedded album art or not
    if [ ! -z "$ONLINE_ALBUM_ART" ]; then
        log "getting cover from internet"
        get_cover_online
        return
    fi

    # Extract the album art from the mp3 file and dont show the messsy
    # output of ffmpeg
    ffmpeg -an -i "$MUSIC_DIR$(mpc current -f %file%)" "$COVER_TEMP" -y &> /dev/null

    # Get the status of the previous command
    STATUS=$?

    # Check if the file has a embbeded album art
    if [ "$STATUS" -eq 0 ];then
        log "extracted album art"
        ARTLESS=false
    else
		CURRENT=$(mpc current -f %file%)

		DIR="$(dirname "$MUSIC_DIR$CURRENT")"
		
		# If playing a cuesheet, dirname will return the cue file
		# Check if a cue file is playing and call dirname on it again
		# to get the actual directory
        if echo "$DIR" | grep -q .cue$; then
			log "Setting $DIR to:"
            DIR=$(dirname "$DIR")
			log "$DIR"
		fi

		# prevent iterating the entire $MUSIC_DIR if mpc experiences an error
        [ "$DIR" == "$MUSIC_DIR". ] && return 1

        log "inspecting $DIR"

		COVER_NAMES='folder|cover|front'
		COVER_EXT='png|jpg|jpeg'

        # Check if there is an album cover/art in the folder.
        # Look at issue #9 for more details
		while IFS= read -r CANDIDATE ; do
            if [ -f "$CANDIDATE" ]; then
                STATUS=0
                ARTLESS=false
                convert "$CANDIDATE" $COVER_TEMP &> /dev/null
				log "found $(basename "$CANDIDATE")"
				break
            fi
		done < <(find "$DIR" -type f | grep -i -E -- "($COVER_NAMES).($COVER_EXT)")
    fi

    if [ "$STATUS" -ne 0 ];then
        log "file does not have an album art"
        get_cover_online
    fi
}


update_cover() {
    find_album_art

    if [ "$ARTLESS" == false ] && [ -n "$SIZE" ]; then
        convert "$COVER_TEMP" -resize "$SIZE" "$COVER_TEMP" &> /dev/null
        log "resized album art to $SIZE"
    fi

}

pre_exit() {
	# Clear visible image
	kitten icat --clear

    # Get the proccess ID of kunst and kill it.
    # We are dumping the output of kill to /dev/null
    # because if the user quits nsxiv before they
    # exit kunst, an error will be shown
    # from kill and we dont want that
    kill -9 "$(cat "$TMP/kunst.pid")" &>/dev/null

}

test_cover_difference() {
	# Use cmp to find difference
	cmp -s -n 8192 "$COVER_TEMP" "$COVER" && return 1
	return 0
}

main() {

    dependencies=(kitten convert bash ffmpeg mpc jq mpd)
    for dependency in "${dependencies[@]}"; do
        type -p "$dependency" &>/dev/null || {
            logError "could not find '${dependency}', is it installed?"
        }
    done

    # Flag to run some commands only once in the loop
    FIRST_RUN=true

    while true; do
        update_cover

        if [ "$ARTLESS" == true ];then
            # Change the path to COVER because the music note
            # image is a png not jpg
            COVER=$TMP/kunst.png

            # Decode the base64 encoded image and save it
            # to /tmp/kunst.png
            echo "$MUSIC_NOTE" | base64 --decode > "$COVER"
        fi

        if [ "$FIRST_RUN" == true ]; then
            FIRST_RUN=false

			rm "$COVER"

            # Display the album art using nsxiv
            # nsxiv -g "$SIZE$POSITION" -b "$COVER" -N "Kunst" &

            # Save the process ID so that we can kill
            # nsxiv when the user exits the script
            echo $! >"$TMP/kunst.pid"
        fi

		if test_cover_difference ; then
			mv "$COVER_TEMP" "$COVER"

			clear

			set_term_size

			# Display the album art in the terminal with kitten icat
			kitten icat --place "$DISPLAY_SIZE@$POSITION" --scale-up --clear "$COVER"

			log "swapped album art to $(mpc current)"

		fi
        # Waiting for an event from mpd; play/pause/next/previous
        # this is lets kunst use less CPU :)
        while true; do
			mpc idle player &>/dev/null && (mpc status %state% | grep "playing" &>/dev/null) && break
        done
        log "received event from mpd"
    done
}

# Disable CTRL-Z because if we allowed this key press,
# then the script would exit but, nsxiv would still be
# running
trap "" SIGTSTP

trap pre_exit EXIT
main